"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFragments = void 0;
const macros_1 = require("../../utils/macros");
const utils_1 = require("../../utils/utils");
const generator_1 = require("./generator");
/**
 * Generates schema for custom extension fragments.
 * @param {SchemaDefinition} appSchema - Schema of the app
 * @param {SchemaDefinition} genericMacrosSchema - generic macros schema of the app
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {string} pageId - page id from manifest targets
 *
 * @returns the app specific JSON schema
 */
function resolveFragments(appSchema, genericMacrosSchema, generateParameters, pageId) {
    const targetManifest = (0, utils_1.getManifestPage)(generateParameters.manifest, pageId);
    const targetManifestSections = targetManifest?.options?.settings.content?.body?.sections;
    if (targetManifestSections) {
        for (const sectionName in targetManifestSections) {
            const fragmentName = targetManifestSections[sectionName]['template'];
            if (fragmentName) {
                const definition = {
                    additionalProperties: false,
                    description: 'Custom Extension Fragment',
                    metadata: {}
                };
                const definitionKey = (0, macros_1.getCustomExtensionFragmentDefinitionKey)(fragmentName);
                const extensionFile = (0, utils_1.getPageCustomExtensionFile)(generateParameters.fragments, targetManifest, generateParameters.manifest, 'fragment', fragmentName);
                // assign relative file path to project for fragment
                definition.metadata.filePath = extensionFile.relativeFilePath;
                appSchema['definitions'][definitionKey] = definition;
                // get fragment schema
                const macroSchemaDefinition = (0, generator_1.generateMacrosSchemaDefinition)(genericMacrosSchema, extensionFile, generateParameters.serviceAVT, generateParameters.logger);
                definition.properties = macroSchemaDefinition.properties;
                // copy schema definitions from macros schema to app schema
                for (const i in macroSchemaDefinition.definitions) {
                    if (!appSchema.definitions[i]) {
                        appSchema.definitions[i] = macroSchemaDefinition.definitions[i];
                    }
                }
            }
        }
    }
    return genericMacrosSchema;
}
exports.resolveFragments = resolveFragments;
//# sourceMappingURL=pageExtenstions.js.map